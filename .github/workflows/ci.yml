name: CI
on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Windows" link on this page:
                                        # https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH     
      - name: Download and install Fledge
        env:
          FLEDGE_REPO_URL: "https://github.com/fledge-iot/fledge/archive/refs/heads/develop.zip" 
        run: |
          curl -sSLo fledge-pkg.zip ${{ env.FLEDGE_REPO_URL }}
          unzip -o fledge-pkg.zip -d $HOME
          mv $HOME/fledge-develop $HOME/fledge
          cd $HOME/fledge
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev
          sudo $HOME/fledge/requirements.sh
          sudo make install
          sudo mkdir -p /usr/include/fledge/rapidjson/
          find $HOME/fledge/C/common/ -name '*.h' -exec sudo cp -prv '{}' '/usr/include/fledge/' ';'
          find $HOME/fledge/C/plugins/ -name '*.h' -exec sudo cp -prv '{}' '/usr/include/fledge/' ';'
          find $HOME/fledge/C/services/ -name '*.h' -exec sudo cp -prv '{}' '/usr/include/fledge/' ';'
          find $HOME/fledge/C/tasks/ -name '*.h' -exec sudo cp -prv '{}' '/usr/include/fledge/' ';'
          sudo cp -prv $HOME/fledge/C/thirdparty/rapidjson/include/rapidjson/* /usr/include/fledge/rapidjson/
          sudo mkdir -p /usr/lib/fledge/
          sudo cp -prv /usr/local/fledge/lib/* /usr/lib/fledge/
      - name: Download and install lib60870
        env:
          LIB60870_REPO_URL: "https://github.com/mz-automation/lib60870.git" 
          MBEDTLS_REPO_URL: "https://github.com/ARMmbed/mbedtls/archive/refs/tags/v2.16.12.tar.gz"
        run: |
          cd $HOME
          git clone ${{ env.LIB60870_REPO_URL }}
          cd $HOME/lib60870/lib60870-C
          cd dependencies
          wget  ${{ env.MBEDTLS_REPO_URL }}
          tar xf v2.16.12.tar.gz
          cd ..
          mkdir build
          cd build
          cmake -DBUILD_TESTS=NO -DBUILD_EXAMPLES=NO ..
          make
          sudo make install
          echo Set the environment variable LIB_104 to $HOME/lib60870
          export LIB_104=$HOME/lib60870
          sudo mkdir -p /usr/local/include/lib60870/
          sudo cp $HOME/lib60870/lib60870-C/src/hal/inc/* /usr/local/include/lib60870/
          sudo cp $HOME/lib60870/lib60870-C/src/inc/api/* /usr/local/include/lib60870/
          sudo cp $HOME/lib60870/lib60870-C/src/inc/internal/* /usr/local/include/lib60870/
      - name: Download and install Google Unit Test framework
        run: |
          sudo apt-get install libgtest-dev
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo apt-get install libgmock-dev
      - name: Download and install gcovr
        run: |
          sudo apt-get install gcovr
      - name: Run build-wrapper
        run: |
          chmod +x mkversion
          export LD_LIBRARY_PATH=/usr/lib:/usr/local/lib
          mkdir build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Coverage
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
          cd build 
          make
          make iec104_coverage_sonar
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" --define sonar.organization="fledge-power" --define sonar.projectKey="fledge-power_<project name>" --define sonar.inclusions="**/plugin.cpp,**/iec104.cpp,**/include/iec104.h" --define sonar.coverageReportPaths="build/iec104_coverage_sonar-sonarqube.xml"
